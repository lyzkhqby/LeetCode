/**
 * Created by zk on 2016/10/5.
 */
public class BulbSwitcher {
//    那么我们来看这道题吧，还是先枚举个小例子来分析下，比如只有5个灯泡的情况，'X'表示亮，‘√’表示灭，如下所示：
//
//    初始状态：    X    X    X    X    X
//
//    第一次：      √    √    √    √    √
//
//    第二次：      √     X    √    X    √
//
//    第三次：      √     X    X    X    √
//
//    第四次：      √     X    X    √    √
//
//    第五次：      √     X    X    √    X
//
//    那么最后我们发现五次遍历后，只有1号和4号锁是亮的，而且很巧的是它们都是平方数，是巧合吗，还是其中有什么玄机。
//    我们仔细想想，对于第n个灯泡，只有当次数是n的因子的之后，才能改变灯泡的状态，即n能被当前次数整除，比如当n为36时，
//    它的因数有(1,36), (2,18), (3,12), (4,9), (6,6), 可以看到前四个括号里成对出现的因数各不相同，括号中前面的数改变了灯泡状态，
//    后面的数又变回去了，等于锁的状态没有发生变化，只有最后那个(6,6)，在次数6的时候改变了一次状态，没有对应其它的状态能将其变回去了，
//    所以锁就一直是打开状态的。所以所有平方数都有这么一个相等的因数对，即所有平方数的灯泡都将会是打开的状态。

    public int bulbSwitch(int n) {
        int res = 0;
        for (int i = 1; i * i <= n; i++) {
            res++;
        }
        return res;

    }
}
